@startuml product_diagram

class CreateProductDto {
  + name: string
  + product_code: string
  + quantity: number
  + price: number
}

class UpdateProductDto {
  + name?: string
  + product_code?: string
  + quantity?: number
  + price?: number
}

class Product {
  + id: number
  + name: string
  + product_code: string
  + quantity: number
  + price: decimal
}

class ProductService {
  - productRepository: Repository<Product>
  + create(dto: CreateProductDto): Promise<Product>
  + findAll(): Promise<List<Product>>
  + findAllPaginated(page: number, limit: number): Promise<PaginationResult>
  + findOne(id: number): Promise<Product>
  + update(id: number, dto: UpdateProductDto): Promise<Product>
  + remove(id: number): Promise<void>
}

CreateProductDto --> Product : utiliza para criar
UpdateProductDto --> Product : utiliza para atualizar
ProductService --> Product : manipula
ProductService ..> ConflictException : lança
ProductService ..> NotFoundException : lança

@enduml
